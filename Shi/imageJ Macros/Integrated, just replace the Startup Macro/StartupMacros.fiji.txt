macro "Save as TIFF and PNG [s]" {
    // Get the current image title
    title = getTitle();
    
    // This line set the directory to the current image location
    saveDir = getDirectory("image");
    
    
    // This line set the save directory (modify this to your desired folder)
    if(saveDir == ''){
    	saveDir = getDirectory("save to...");
    }



    // Save the current image as TIFF
    saveAs("Tiff", saveDir + title);

    // Save the current image as PNG
    saveAs("PNG", saveDir + title);
    
    showMessage("Save Successful to: ", saveDir);

}

macro "redox_splitter" {
	// SplitRedoxChannels_SameFolder.ijm
	// Pick one folder; all "*redox*.oir" files there will be split
	// and the TIFFs written back into the same folder.
	
	dir = getDirectory("Choose folder containing your .oir files");
	list = getFileList(dir);
	
	for (i = 0; i < list.length; i++) {
	    name    = list[i];
	    nameLow = toLowerCase(name);
	    if (endsWith(nameLow, ".oir") && indexOf(nameLow, "redox") >= 0) {
	        path = dir + name;
	        
        	run("Bio-Formats Importer", 
            "open=[" + path + "] autoscale color_mode=Default view=Hyperstack " +
            "stack_order=XYCZT");
            
	        title = getTitle();
	
	        // split into C1-title and C2-title
	        run("Split Channels");
	
	        // save channel 1 as basename_fad.tif
	        selectWindow("C1-" + title);
	        saveAs("Tiff", dir
	            + substring(name, 0, 1)
	            + "-fad.tif");
	
	        // save channel 2 as basename_nadh.tif
	        selectWindow("C2-" + title);
	        saveAs("Tiff", dir
	            + substring(name, 0, 1)
	            + "-nadh.tif");
	
	        run("Close All");
    }
}

}

macro "Open and Subtract 845" {
		// Step 1: Define wavelengths to subtract from the background wavelength
	subtract_wavelengths = newArray("841.0nm", "843.0nm", "845.0nm"); // Add more wavelengths here as needed
	background_wavelength = "862.0nm";  // Modify this as needed

	// Step 2: Prompt the user to select a folder
	dir = getDirectory("Choose a Directory, the folder where your images are");

	// Step 3: Get the list of files in the selected folder
	fileList = getFileList(dir);


	// Arrays to store matched images and subtracted ones
	roi_background_images = newArray();
	roi_other_images = newArray();
	other_wavelengths = newArray();
	subtracted_images = newArray();  // Track images involved in subtraction

	// Step 5: Sort images by wavelength (background and other wavelengths)
	for (i = 0; i < fileList.length; i++) {
		filename = fileList[i];
		
		// skip all the tif files existed
		if (indexOf(filename, ".tif") >= 0 || indexOf(filename, "redox") >= 0) {
			continue;
		}
		// Split the image name using "-"
		split_name = split(filename, "-");
		if (split_name.length < 3) {
		    continue;
		}
		if(split_name[1].length > 7) {
			continue;
		}
		// Extract ROI number and wavelength
		roi = split_name[0];   // ROI number (first part)
		wavelength = split_name[1];   // Wavelength (second part)
		// print(roi, wavelength);

	// YKW, arrays.contains does not work, and idk why
		for (j = 0; j < subtract_wavelengths.length; j++) {
			if (subtract_wavelengths[j] == wavelength) {
				roi_other_images = Array.concat(roi_other_images, filename);
				other_wavelengths = Array.concat(other_wavelengths, wavelength);  // Track for naming results
			}
		}
		if (wavelength == background_wavelength) {
			roi_background_images = Array.concat(roi_background_images, filename);
		} 
	}
	// ------------------------------------------------
	// Function to convert array to a string
	function arrayToString(array) {
		str = "";
		for (i = 0; i < array.length; i++) {
			str += array[i];
			if (i < array.length - 1) {
				str += ", "; // Add comma separator
			}
		}
		return str;
	}

	// Convert arrays to strings for printing
	roi_background_images_str = arrayToString(roi_background_images);

	// Print the arrays
	print("Background images: " + roi_background_images_str);
	print("Subtracting images: ");

	// -----------------------------------------------------


	// Step 6: Perform subtraction for corresponding ROIs and wavelengths
for (i = 0; i < roi_other_images.length; i++) {
    roi_other_name = roi_other_images[i];
    print(roi_other_name);
    split_name = split(roi_other_name, "-");  // Extract ROI number
    roi = split_name[0];
    // Find the corresponding background wavelength image with the same ROI
    for (j = 0; j < roi_background_images.length; j++) {
        roi_background_name = roi_background_images[j];
        
        // Match by ROI (first part of the name)
        if (startsWith(roi_background_name, roi)) {
            // Open both images for subtraction
            // open(dir + roi_other_name);
            // open(dir + roi_background_name);
            run("Bio-Formats Importer", "open=[" + dir + roi_other_name + "] autoscale color_mode=Default view=Hyperstack stack_order=XYCZT");
            applyLUT(split_name[1]);

            run("Bio-Formats Importer", "open=[" + dir + roi_background_name + "] autoscale color_mode=Default view=Hyperstack stack_order=XYCZT");


            // Subtract background image from other wavelength image
            run("Image Calculator...", "operation=Subtract image1=[" + roi_other_name + "] image2=[" + roi_background_name + "] create");

            // Track subtracted images to avoid reopening
            subtracted_images = Array.concat(subtracted_images, roi_other_name);

            // Close the original images
            close(roi_other_name);
            close(roi_background_name);
        }

    }

}
subtracted_images = Array.concat(subtracted_images, roi_background_images);

print("subtracted_images:" + arrayToString(subtracted_images));

// Define your LUT mappings
lut_mappings = newArray(
    "791.3nm=Red", 
    "794.6nm=Cyan", 
    "797.2nm=Green", 
    "787.2nm=Yellow", 
    "841.0nm=Magenta", 
    "843.0nm=Cyan Hot", 
    "845.0nm=Fire"
);

// Function to apply LUT based on wavelength
function applyLUT(wavelength) {
    if (wavelength == "791.3nm") {
        run("Red");
    } else if (wavelength == "794.6nm") {
        run("Cyan");
    } else if (wavelength == "797.2nm") {
        run("Green");
    } else if (wavelength == "787.2nm") {
        run("Yellow");
    } else if (wavelength == "841.0nm") {
        run("Magenta");
    } else if (wavelength == "843.0nm") {
        run("Cyan Hot");
    } else if (wavelength == "845.0nm") {
        run("Fire");
    }
}

// Step 7: Open all images that were not involved in subtraction
for (i = 0; i < fileList.length; i++) {
    filename = fileList[i];
    
    if (indexOf(filename, ".tif") >= 0 || indexOf(filename, "redox") >= 0) {
			continue;
		}
		
	// Split the image name using "-"
	split_name = split(filename, "-");
	
	if (split_name.length < 3) {
		    continue;
		}
    
    wavelength = split_name[1];   // Extract wavelength from filename

    // Check if the image was involved in subtraction
    for (j = 0; j < subtracted_images.length; j++) {
        if ((filename == subtracted_images[j])) {
            j = subtracted_images.length;
        }

        if(j == (subtracted_images.length - 1)) {
            run("Bio-Formats Importer", "open=[" + dir + filename + "] autoscale color_mode=Default view=Hyperstack stack_order=XYCZT");
            
            // Apply the LUT based on the wavelength
            applyLUT(wavelength);
        }
    }
}

macro "Open and Subtract 844.6" {
		// Step 1: Define wavelengths to subtract from the background wavelength
	subtract_wavelengths = newArray("841.8nm", "844.6nm"); // Add more wavelengths here as needed
	background_wavelength = "862.0nm";  // Modify this as needed

	// Step 2: Prompt the user to select a folder
	dir = getDirectory("Choose a Directory, the folder where your images are");

	// Step 3: Get the list of files in the selected folder
	fileList = getFileList(dir);


	// Arrays to store matched images and subtracted ones
	roi_background_images = newArray();
	roi_other_images = newArray();
	other_wavelengths = newArray();
	subtracted_images = newArray();  // Track images involved in subtraction

	// Step 5: Sort images by wavelength (background and other wavelengths)
	for (i = 0; i < fileList.length; i++) {
		filename = fileList[i];

		// skip all the tif files existed
		if (indexOf(filename, ".tif") >= 0 || indexOf(filename, "redox") >= 0) {
			continue;
		}
		
		// Split the image name using "-"
		split_name = split(filename, "-");
		if (split_name.length < 3) {
		    continue;
		}
		if(split_name[1].length > 7) {
			continue;
		}
		// Extract ROI number and wavelength
		roi = split_name[0];   // ROI number (first part)
		wavelength = split_name[1];   // Wavelength (second part)
		// print(roi, wavelength);

	// YKW, arrays.contains does not work, and idk why
		for (j = 0; j < subtract_wavelengths.length; j++) {
			if (subtract_wavelengths[j] == wavelength) {
				roi_other_images = Array.concat(roi_other_images, filename);
				other_wavelengths = Array.concat(other_wavelengths, wavelength);  // Track for naming results
			}
		}
		if (wavelength == background_wavelength) {
			roi_background_images = Array.concat(roi_background_images, filename);
		} 
	}
	// ------------------------------------------------
	// Function to convert array to a string
	function arrayToString(array) {
		str = "";
		for (i = 0; i < array.length; i++) {
			str += array[i];
			if (i < array.length - 1) {
				str += ", "; // Add comma separator
			}
		}
		return str;
	}

	// Convert arrays to strings for printing
	roi_background_images_str = arrayToString(roi_background_images);

	// Print the arrays
	print("Background images: " + roi_background_images_str);
	print("Subtracting images: ");

	// -----------------------------------------------------


	// Step 6: Perform subtraction for corresponding ROIs and wavelengths
for (i = 0; i < roi_other_images.length; i++) {
    roi_other_name = roi_other_images[i];
    print(roi_other_name);
    split_name = split(roi_other_name, "-");  // Extract ROI number
    roi = split_name[0];
    // Find the corresponding background wavelength image with the same ROI
    for (j = 0; j < roi_background_images.length; j++) {
        roi_background_name = roi_background_images[j];
        
        // Match by ROI (first part of the name)
        if (startsWith(roi_background_name, roi)) {
            // Open both images for subtraction
            // open(dir + roi_other_name);
            // open(dir + roi_background_name);
            run("Bio-Formats Importer", "open=[" + dir + roi_other_name + "] autoscale color_mode=Default view=Hyperstack stack_order=XYCZT");
            applyLUT(split_name[1]);

            run("Bio-Formats Importer", "open=[" + dir + roi_background_name + "] autoscale color_mode=Default view=Hyperstack stack_order=XYCZT");


            // Subtract background image from other wavelength image
            run("Image Calculator...", "operation=Subtract image1=[" + roi_other_name + "] image2=[" + roi_background_name + "] create");

            // Track subtracted images to avoid reopening
            subtracted_images = Array.concat(subtracted_images, roi_other_name);

            // Close the original images
            close(roi_other_name);
            close(roi_background_name);
        }

    }

}
subtracted_images = Array.concat(subtracted_images, roi_background_images);

print("subtracted_images:" + arrayToString(subtracted_images));

// Define your LUT mappings
lut_mappings = newArray(
    "791.3nm=Red", 
    "794.6nm=Cyan", 
    "797.2nm=Green", 
    "787.2nm=Yellow", 
    "841.8nm=Magenta", 
    "844.6nm=Cyan Hot"
);

// Function to apply LUT based on wavelength
function applyLUT(wavelength) {
    if (wavelength == "791.3nm") {
        run("Red");
    } else if (wavelength == "794.6nm") {
        run("Cyan");
    } else if (wavelength == "797.2nm") {
        run("Green");
    } else if (wavelength == "787.2nm") {
        run("Yellow");
    } else if (wavelength == "841.8nm") {
        run("Magenta");
    } else if (wavelength == "844.6nm") {
        run("Cyan Hot");
    }
}

// Step 7: Open all images that were not involved in subtraction
for (i = 0; i < fileList.length; i++) {
    filename = fileList[i];
    
    if (indexOf(filename, ".tif") >= 0 || indexOf(filename, "redox") >= 0) {
			continue;
		}
		
	// Split the image name using "-"
	split_name = split(filename, "-");
	
	if (split_name.length < 3) {
		    continue;
		}
		
    wavelength = split_name[1];   // Extract wavelength from filename

    // Check if the image was involved in subtraction
    for (j = 0; j < subtracted_images.length; j++) {
        if ((filename == subtracted_images[j])) {
            j = subtracted_images.length;
        }

        if(j == (subtracted_images.length - 1)) {
            run("Bio-Formats Importer", "open=[" + dir + filename + "] autoscale color_mode=Default view=Hyperstack stack_order=XYCZT");
            
            // Apply the LUT based on the wavelength
            applyLUT(wavelength);
        }
    }
}

macro "masked CD mean png tiff" {
	// ImageJ Macro: batch‐apply LUT, measure mean, then allow contrast tweak & save
	
	// 1) choose folder
	dir = getDirectory("Choose a Directory");
	list = getFileList(dir);
	
	// 2) clear any old results
	run("Clear Results");
	
	for (i = 0; i < list.length; i++) {
	    file = list[i];
	    if (!endsWith(file, "-masked.tif")) continue;
	    
	    // 3) open via Bio-Formats
	    run("Bio-Formats Importer", 
	        "open=[" + dir + file + "] autoscale color_mode=Default view=Hyperstack stack_order=XYCZT");
	    
	    // 4) grab the real window title
	    title = getTitle();  
	    
	    // 5) apply the right LUT
	    if (indexOf(title, "841.8nm") != -1) {
	        run("Magenta");
	    } else if (indexOf(title, "844.6nm") != -1) {
	        run("Cyan Hot");
	    } else if (indexOf(title, "841.0nm") != -1) {
	        run("Magenta");
	    } else if (indexOf(title, "845.0nm") != -1) {
	        run("Cyan Hot");
	    }
	    
	    // 6) measure mean intensity
	    run("Set Measurements...", "mean redirect=None decimal=3");
	    run("Measure");
	    
	    // 7) let you adjust contrast
	    run("Brightness/Contrast...");
	    waitForUser("Adjust contrast for " + title + " then click OK");
	
	    // 8) build a base filename (strip “.tif”)
	    base = replace(title, ".tif", "");
	    
	    // 9) save as TIFF and PNG with “-lut” suffix
	    saveAs("Tiff", dir + base + ".tif");
	    run("Smooth");
	    saveAs("PNG",  dir + base + ".png");
	    
	    // 10) close and loop
	    close();
}
